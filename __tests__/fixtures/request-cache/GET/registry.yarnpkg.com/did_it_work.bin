HTTP/1.1 200 OK
Date: Wed, 12 Oct 2016 08:58:48 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d01f56abafdbfd09672896d0a2bcd09b61476262728; expires=Thu, 12-Oct-17 08:58:48 GMT; path=/; domain=.yarnpkg.com; HttpOnly
etag: W/"27EOYHIN2H09LDA6CENZBY8RG"
Cache-Control: max-age=300
Via: 1.1 varnish
Age: 7
X-Served-By: cache-lcy1126-LCY
X-Cache: HIT
X-Cache-Hits: 1
X-Timer: S1476262728.540338,VS0,VE0
Vary: Accept-Encoding
Server: cloudflare-nginx
CF-RAY: 2f095a256dc635e4-LHR

2d77
{"_id":"did_it_work","_rev":"13-6275c74d3f9cc8ea40ea6e809e9f91b4","name":"did_it_work","description":"A simple process launcher that determines whether the process succeeded or failed.","dist-tags":{"latest":"0.0.6"},"versions":{"0.0.1":{"name":"did_it_work","version":"0.0.1","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"_id":"did_it_work@0.0.1","readme":"ERROR: No README.md file found!","dist":{"shasum":"901010b3fb1a5257cd76758274f7d6910e9c5464","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}},"0.0.2":{"name":"did_it_work","version":"0.0.2","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"readme":"Did It Work?\n============\n\n***Did it Work?***: A simple process launcher that determines whether the process succeeded or failed.\n\nInstall\n-------\n\n    npm install did_it_work\n\nUsage\n-----\n\n    var process = require('did_it_work');\n\n    process('my_awesome_program')\n      .goodIfMatches(/Ready/, 1000)\n      .badIfMatches(/Error/)\n      .good(function(){\n        console.log('The program worked (because it spat out \"Ready\" to stdout within 1000ms).')\n      })\n      .bad(function(){\n        console.log('The program didn\\'t work (because it spat out \"Error\" to stdout, or the program exited with non-zero code, or it didn\\'t spit out \"Ready\" within 1000ms)')\n      })\n      .complete(function(){\n        console.log('In any case, the program exited')\n      })\n\nUse `spawn` instead of `exec`\n-----------------------------\n\nIf you pass one string argument to the function, it will use `child_process.exec` to create the process. If, on the other hand, you need to use `child_process.spawn`, pass two arguments instead, the first being the executable and the second being an array of arguments. Example\n\n    process('echo', ['hello', 'world'])\n      .complete(function(stdout){\n        console.log('The program returned ' + stdout)\n      })\n\nRTFT\n----\n\nTo see more, read the tests in `tests.js`.","readmeFilename":"README.md","_id":"did_it_work@0.0.2","dist":{"shasum":"9d4b133af6dd17bf86750e51a2b7e9d6755c8589","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}},"0.0.3":{"name":"did_it_work","version":"0.0.3","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"readme":"Did It Work?\n============\n\n***Did it Work?***: A simple process launcher that determines whether the process succeeded or failed.\n\nInstall\n-------\n\n    npm install did_it_work\n\nUsage\n-----\n\n    var process = require('did_it_work');\n\n    process('my_awesome_program')\n      .goodIfMatches(/Ready/, 1000)\n      .badIfMatches(/Error/)\n      .good(function(){\n        console.log('The program worked (because it spat out \"Ready\" to stdout within 1000ms).')\n      })\n      .bad(function(){\n        console.log('The program didn\\'t work (because it spat out \"Error\" to stdout, or the program exited with non-zero code, or it didn\\'t spit out \"Ready\" within 1000ms)')\n      })\n      .complete(function(){\n        console.log('In any case, the program exited')\n      })\n\nUse `spawn` instead of `exec`\n-----------------------------\n\nIf you pass one string argument to the function, it will use `child_process.exec` to create the process. If, on the other hand, you need to use `child_process.spawn`, pass two arguments instead, the first being the executable and the second being an array of arguments. Example\n\n    process('echo', ['hello', 'world'])\n      .complete(function(stdout){\n        console.log('The program returned ' + stdout)\n      })\n\nRTFT\n----\n\nTo see more, read the tests in `tests.js`.","readmeFilename":"README.md","_id":"did_it_work@0.0.3","dist":{"shasum":"04b8311ff5612227a7f32b2eec75d2eda99355cd","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.3.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}},"0.0.4":{"name":"did_it_work","version":"0.0.4","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"readme":"Did It Work?\n============\n\n***Did it Work?***: A simple process launcher that determines whether the process succeeded or failed.\n\nInstall\n-------\n\n    npm install did_it_work\n\nUsage\n-----\n\n    var process = require('did_it_work');\n\n    process('my_awesome_program')\n      .goodIfMatches(/Ready/, 1000)\n      .badIfMatches(/Error/)\n      .good(function(){\n        console.log('The program worked (because it spat out \"Ready\" to stdout within 1000ms).')\n      })\n      .bad(function(){\n        console.log('The program didn\\'t work (because it spat out \"Error\" to stdout, or the program exited with non-zero code, or it didn\\'t spit out \"Ready\" within 1000ms)')\n      })\n      .complete(function(){\n        console.log('In any case, the program exited')\n      })\n\nUse `spawn` instead of `exec`\n-----------------------------\n\nIf you pass one string argument to the function, it will use `child_process.exec` to create the process. If, on the other hand, you need to use `child_process.spawn`, pass two arguments instead, the first being the executable and the second being an array of arguments. Example\n\n    process('echo', ['hello', 'world'])\n      .complete(function(stdout){\n        console.log('The program returned ' + stdout)\n      })\n\nRTFT\n----\n\nTo see more, read the tests in `tests.js`.","readmeFilename":"README.md","_id":"did_it_work@0.0.4","dist":{"shasum":"4a1f3135858f3caa9e156d7ffc82a2ccf35e15b2","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.4.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}},"0.0.5":{"name":"did_it_work","version":"0.0.5","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"readme":"Did It Work?\n============\n\n***Did it Work?***: A simple process launcher that determines whether the process succeeded or failed.\n\nInstall\n-------\n\n    npm install did_it_work\n\nUsage\n-----\n\n    var process = require('did_it_work');\n\n    process('my_awesome_program')\n      .goodIfMatches(/Ready/, 1000)\n      .badIfMatches(/Error/)\n      .good(function(){\n        console.log('The program worked (because it spat out \"Ready\" to stdout within 1000ms).')\n      })\n      .bad(function(){\n        console.log('The program didn\\'t work (because it spat out \"Error\" to stdout, or the program exited with non-zero code, or it didn\\'t spit out \"Ready\" within 1000ms)')\n      })\n      .complete(function(){\n        console.log('In any case, the program exited')\n      })\n\nUse `spawn` instead of `exec`\n-----------------------------\n\nIf you pass one string argument to the function, it will use `child_process.exec` to create the process. If, on the other hand, you need to use `child_process.spawn`, pass two arguments instead, the first being the executable and the second being an array of arguments. Example\n\n    process('echo', ['hello', 'world'])\n      .complete(function(stdout){\n        console.log('The program returned ' + stdout)\n      })\n\nRTFT\n----\n\nTo see more, read the tests in `tests.js`.","readmeFilename":"README.md","_id":"did_it_work@0.0.5","dist":{"shasum":"5db190e0c69a98f8106f5431dc085ebe3bc238a2","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.5.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}},"0.0.6":{"name":"did_it_work","version":"0.0.6","description":"A simple process launcher that determines whether the process succeeded or failed.","main":"index.js","scripts":{"test":"mocha -u tdd tests.js"},"repository":"","author":{"name":"Toby Ho"},"license":"MIT","dependencies":{},"devDependencies":{"chai":"~1.5.0"},"readme":"Did It Work?\n============\n\n***Did it Work?***: A simple process launcher that determines whether the process succeeded or failed.\n\nInstall\n-------\n\n    npm install did_it_work\n\nUsage\n-----\n\n    var process = require('did_it_work');\n\n    process('my_awesome_program')\n      .goodIfMatches(/Ready/, 1000)\n      .badIfMatches(/Error/)\n      .good(function(){\n        console.log('The program worked (because it spat out \"Ready\" to stdout within 1000ms).')\n      })\n      .bad(function(){\n        console.log('The program didn\\'t work (because it spat out \"Error\" to stdout, or the program exited with non-zero code, or it didn\\'t spit out \"Ready\" within 1000ms)')\n      })\n      .complete(function(){\n        console.log('In any case, the program exited')\n      })\n\nUse `spawn` instead of `exec`\n-----------------------------\n\nIf you pass one string argument to the function, it will use `child_process.exec` to create the process. If, on the other hand, you need to use `child_process.spawn`, pass two arguments instead, the first being the executable and the second being an array of arguments. Example\n\n    process('echo', ['hello', 'world'])\n      .complete(function(stdout){\n        console.log('The program returned ' + stdout)\n      })\n\nRTFT\n----\n\nTo see more, read the tests in `tests.js`.","readmeFilename":"README.md","_id":"did_it_work@0.0.6","dist":{"shasum":"5180cb9e16ebf9a8753a0cc6b4af9ccdff71ec05","tarball":"https://registry.npmjs.org/did_it_work/-/did_it_work-0.0.6.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"airportyh","email":"airportyh@gmail.com"},"maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"directories":{}}},"readme":"ERROR: No README.md file found!","maintainers":[{"name":"airportyh","email":"airportyh@gmail.com"}],"time":{"modified":"2013-06-20T02:29:23.612Z","created":"2013-04-26T16:25:30.534Z","0.0.1":"2013-04-26T16:25:31.431Z","0.0.2":"2013-04-29T07:10:41.838Z","0.0.3":"2013-04-29T07:47:56.420Z","0.0.4":"2013-06-08T12:40:42.997Z","0.0.5":"2013-06-08T12:50:56.699Z","0.0.6":"2013-06-20T02:29:23.612Z"},"author":{"name":"Toby Ho"},"_attachments":{}}
0

