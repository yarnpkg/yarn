HTTP/1.1 200 OK
Date: Fri, 14 Oct 2016 21:05:11 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d2454fb914c0dbde2114462815270dc911476479111; expires=Sat, 14-Oct-17 21:05:11 GMT; path=/; domain=.yarnpkg.com; HttpOnly
etag: W/"716YKW9S6TZLND0R0SJTSMZ7C"
Cache-Control: max-age=300
Via: 1.1 varnish
Age: 22
X-Served-By: cache-ams4148-AMS
X-Cache: HIT
X-Cache-Hits: 1
X-Timer: S1476479111.252684,VS0,VE0
Vary: Accept-Encoding
Server: cloudflare-nginx
CF-RAY: 2f1dfced3e530c0b-AMS

21db
{"_id":"console-control-strings","_rev":"3-d867ab058aee6bee962ebd838974ef34","name":"console-control-strings","description":"A library of cross-platform tested terminal/console command strings for doing things like color and cursor positioning.  This is a subset of both ansi and vt100.  All control codes included work on both Windows & Unix-like OSes, except where noted.","dist-tags":{"latest":"1.1.0"},"versions":{"1.0.0":{"name":"console-control-strings","version":"1.0.0","description":"A library of cross-platform tested terminal/console command strings for doing things like color and cursor positioning.  This is a subset of both ansi and vt100.  All control codes included work on both Windows & Unix-like OSes, except where noted.","main":"index.js","directories":{"test":"test"},"scripts":{"test":"standard && tap test/*.js"},"repository":{"type":"git","url":"git+https://github.com/iarna/console-control-strings.git"},"keywords":[],"author":{"name":"Rebecca Turner","email":"me@re-becca.org","url":"http://re-becca.org/"},"license":"ISC","files":["LICENSE","index.js"],"devDependencies":{"standard":"^7.1.2","tap":"^5.7.2"},"gitHead":"7c5d72b64e49f56cdbb25d60a13a362526d6d162","bugs":{"url":"https://github.com/iarna/console-control-strings/issues"},"homepage":"https://github.com/iarna/console-control-strings#readme","_id":"console-control-strings@1.0.0","_shasum":"4e6aac25444ab157f528a4487d6524a25c506a4f","_from":".","_npmVersion":"3.9.2","_nodeVersion":"4.4.0","_npmUser":{"name":"iarna","email":"me@re-becca.org"},"dist":{"shasum":"4e6aac25444ab157f528a4487d6524a25c506a4f","tarball":"https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.0.0.tgz"},"maintainers":[{"name":"iarna","email":"me@re-becca.org"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/console-control-strings-1.0.0.tgz_1466025343054_0.1228993758559227"}},"1.1.0":{"name":"console-control-strings","version":"1.1.0","description":"A library of cross-platform tested terminal/console command strings for doing things like color and cursor positioning.  This is a subset of both ansi and vt100.  All control codes included work on both Windows & Unix-like OSes, except where noted.","main":"index.js","directories":{"test":"test"},"scripts":{"test":"standard && tap test/*.js"},"repository":{"type":"git","url":"git+https://github.com/iarna/console-control-strings.git"},"keywords":[],"author":{"name":"Rebecca Turner","email":"me@re-becca.org","url":"http://re-becca.org/"},"license":"ISC","files":["LICENSE","index.js"],"devDependencies":{"standard":"^7.1.2","tap":"^5.7.2"},"gitHead":"722439b4998d2964ac3d3f9ec175c008aa9b7b4b","bugs":{"url":"https://github.com/iarna/console-control-strings/issues"},"homepage":"https://github.com/iarna/console-control-strings#readme","_id":"console-control-strings@1.1.0","_shasum":"3d7cf4464db6446ea644bf4b39507f9851008e8e","_from":".","_npmVersion":"3.9.2","_nodeVersion":"4.4.0","_npmUser":{"name":"iarna","email":"me@re-becca.org"},"dist":{"shasum":"3d7cf4464db6446ea644bf4b39507f9851008e8e","tarball":"https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz"},"maintainers":[{"name":"iarna","email":"me@re-becca.org"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/console-control-strings-1.1.0.tgz_1466033396831_0.9470485949423164"}}},"readme":"# Console Control Strings\n\nA library of cross-platform tested terminal/console command strings for\ndoing things like color and cursor positioning.  This is a subset of both\nansi and vt100.  All control codes included work on both Windows & Unix-like\nOSes, except where noted.\n\n## Usage\n\n```js\nvar consoleControl = require('console-control-strings')\n\nconsole.log(consoleControl.color('blue','bgRed', 'bold') + 'hi there' + consoleControl.color('reset'))\nprocess.stdout.write(consoleControl.goto(75, 10))\n```\n\n## Why Another?\n\nThere are tons of libraries similar to this one.  I wanted one that was:\n\n1. Very clear about compatibility goals.\n2. Could emit, for instance, a start color code without an end one.\n3. Returned strings w/o writing to streams.\n4. Was not weighed down with other unrelated baggage.\n\n## Functions\n\n### var code = consoleControl.up(_num = 1_)\n\nReturns the escape sequence to move _num_ lines up.\n\n### var code = consoleControl.down(_num = 1_)\n\nReturns the escape sequence to move _num_ lines down.\n\n### var code = consoleControl.forward(_num = 1_)\n\nReturns the escape sequence to move _num_ lines righ.\n\n### var code = consoleControl.back(_num = 1_)\n\nReturns the escape sequence to move _num_ lines left.\n\n### var code = consoleControl.nextLine(_num = 1_)\n\nReturns the escape sequence to move _num_ lines down and to the beginning of\nthe line.\n\n### var code = consoleControl.previousLine(_num = 1_)\n\nReturns the escape sequence to move _num_ lines up and to the beginning of\nthe line.\n\n### var code = consoleControl.eraseData()\n\nReturns the escape sequence to erase everything from the current cursor\nposition to the bottom right of the screen.  This is line based, so it\nerases the remainder of the current line and all following lines.\n\n### var code = consoleControl.eraseLine()\n\nReturns the escape sequence to erase to the end of the current line.\n\n### var code = consoleControl.goto(_x_, _y_)\n\nReturns the escape sequence to move the cursor to the designated position. \nNote that the origin is _1, 1_ not _0, 0_.\n\n### var code = consoleControl.gotoSOL()\n\nReturns the escape sequence to move the cursor to the beginning of the\ncurrent line. (That is, it returns a carriage return, `\\r`.)\n\n### var code = consoleControl.beep()\n\nReturns the escape sequence to cause the termianl to beep.  (That is, it\nreturns unicode character `\\x0007`, a Control-G.)\n\n### var code = consoleControl.hideCursor()\n\nReturns the escape sequence to hide the cursor.\n\n### var code = consoleControl.showCursor()\n\nReturns the escape sequence to show the cursor.\n\n### var code = consoleControl.color(_colors = []_)\n\n### var code = consoleControl.color(_color1_, _color2_, _…_, _colorn_)\n\nReturns the escape sequence to set the current terminal display attributes\n(mostly colors).  Arguments can either be a list of attributes or an array\nof attributes.  The difference between passing in an array or list of colors\nand calling `.color` separately for each one, is that in the former case a\nsingle escape sequence will be produced where as in the latter each change\nwill have its own distinct escape sequence.  Each attribute can be one of:\n\n* Reset:\n  * **reset** – Reset all attributes to the terminal default.\n* Styles:\n  * **bold** – Display text as bold.  In some terminals this means using a\n    bold font, in others this means changing the color.  In some it means\n    both.\n  * **italic** – Display text as italic. This is not available in most Windows terminals.\n  * **underline** – Underline text. This is not available in most Windows Terminals.\n  * **inverse** – Invert the foreground and background colors.\n  * **stopBold** – Do not display text as bold.\n  * **stopItalic** – Do not display text as italic.\n  * **stopUnderline** – Do not underline text.\n  * **stopInverse** – Do not invert foreground and background.\n* Colors:\n  * **white**\n  * **black**\n  * **blue**\n  * **cyan**\n  * **green**\n  * **magenta**\n  * **red**\n  * **yellow**\n  * **grey** / **brightBlack**\n  * **brightRed**\n  * **brightGreen**\n  * **brightYellow**\n  * **brightBlue**\n  * **brightMagenta**\n  * **brightCyan**\n  * **brightWhite**\n* Background Colors:\n  * **bgWhite**\n  * **bgBlack**\n  * **bgBlue**\n  * **bgCyan**\n  * **bgGreen**\n  * **bgMagenta**\n  * **bgRed**\n  * **bgYellow**\n  * **bgGrey** / **bgBrightBlack**\n  * **bgBrightRed**\n  * **bgBrightGreen**\n  * **bgBrightYellow**\n  * **bgBrightBlue**\n  * **bgBrightMagenta**\n  * **bgBrightCyan**\n  * **bgBrightWhite**\n\n","maintainers":[{"name":"iarna","email":"me@re-becca.org"}],"time":{"modified":"2016-06-15T23:29:58.743Z","created":"2016-06-15T21:15:45.301Z","1.0.0":"2016-06-15T21:15:45.301Z","1.1.0":"2016-06-15T23:29:58.743Z"},"homepage":"https://github.com/iarna/console-control-strings#readme","keywords":[],"repository":{"type":"git","url":"git+https://github.com/iarna/console-control-strings.git"},"author":{"name":"Rebecca Turner","email":"me@re-becca.org","url":"http://re-becca.org/"},"bugs":{"url":"https://github.com/iarna/console-control-strings/issues"},"license":"ISC","readmeFilename":"README.md","users":{"iarna":true},"_attachments":{}}
0

