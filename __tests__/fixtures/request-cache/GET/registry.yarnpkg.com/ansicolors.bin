HTTP/1.1 200 OK
Date: Fri, 14 Oct 2016 21:05:49 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=dbc6d97b1028fd07b26a233d7b02133731476479149; expires=Sat, 14-Oct-17 21:05:49 GMT; path=/; domain=.yarnpkg.com; HttpOnly
etag: W/"1ZI68P5LWFEYMC1KJNWZO8QAI"
Cache-Control: max-age=300
Via: 1.1 varnish
Age: 129
X-Served-By: cache-ams4423-AMS
X-Cache: HIT
X-Cache-Hits: 1
X-Timer: S1476479149.591412,VS0,VE0
Vary: Accept-Encoding
Server: cloudflare-nginx
CF-RAY: 2f1dfddcfeb12c66-AMS

3dc9
{"_id":"ansicolors","_rev":"17-537501c4d53a1e98422fcf8ccca69f76","name":"ansicolors","description":"Functions that surround a string with ansicolor codes so it prints in color.","dist-tags":{"latest":"0.3.2"},"versions":{"0.1.0":{"name":"ansicolors","version":"0.1.0","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n","_id":"ansicolors@0.1.0","dist":{"shasum":"6a6ac1c95ae33d0d1bc43ebd2f9bfbd2c5242248","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.1.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.0":{"name":"ansicolors","version":"0.2.0","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\n// foreground colors\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n\n// background colors\nconsole.log(colors.bgYellow('printed on yellow background'));\nconsole.log(colors.bgBlue('printed on blue background'));\n\n// mixing background and foreground colors\n// below two lines have same result (order in which bg and fg are combined doesn't matter)\nconsole.log(colors.bgYellow(colors.blue('printed on yellow background in blue')));\nconsole.log(colors.blue(colors.bgYellow('printed on yellow background in blue')));\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n\n## Alternatives\n\n**ansicolors** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n","_id":"ansicolors@0.2.0","dist":{"shasum":"8bc9bf411277f265d459a1ab4417e92ec0486e08","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.2.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.1":{"name":"ansicolors","version":"0.2.1","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\n// foreground colors\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n\n// background colors\nconsole.log(colors.bgYellow('printed on yellow background'));\nconsole.log(colors.bgBrightBlue('printed on bright blue background'));\n\n// mixing background and foreground colors\n// below two lines have same result (order in which bg and fg are combined doesn't matter)\nconsole.log(colors.bgYellow(colors.blue('printed on yellow background in blue')));\nconsole.log(colors.blue(colors.bgYellow('printed on yellow background in blue')));\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n\n## Alternatives\n\n**ansicolors** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n","_id":"ansicolors@0.2.1","dist":{"shasum":"be089599097b74a5c9c4a84a0cdbcdb62bd87aef","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.2.1.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.3.0":{"name":"ansicolors","version":"0.3.0","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\n// foreground colors\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n\n// background colors\nconsole.log(colors.bgYellow('printed on yellow background'));\nconsole.log(colors.bgBrightBlue('printed on bright blue background'));\n\n// mixing background and foreground colors\n// below two lines have same result (order in which bg and fg are combined doesn't matter)\nconsole.log(colors.bgYellow(colors.blue('printed on yellow background in blue')));\nconsole.log(colors.blue(colors.bgYellow('printed on yellow background in blue')));\n```\n\n## Advanced API\n\n**ansicolors** allows you to access opening and closing escape sequences separately.\n\n```js\nvar colors = require('ansicolors');\n\nfunction inspect(obj, depth) {\n  return require('util').inspect(obj, false, depth || 5, true);\n}\n\nconsole.log('open blue', inspect(colors.open.blue));\nconsole.log('close bgBlack', inspect(colors.close.bgBlack));\n\n// => open blue '\\u001b[34m'\n//    close bgBlack '\\u001b[49m'\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n\n## Alternatives\n\n**ansicolors** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n","bugs":{"url":"https://github.com/thlorenz/ansicolors/issues"},"_id":"ansicolors@0.3.0","dist":{"shasum":"3d0467ef4b3b3532ec7cc76530784c718fb0030e","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.3.1":{"name":"ansicolors","version":"0.3.1","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\nIn case you need styles, like `bold`, have a look at [ansistyles](https://github.com/thlorenz/ansistyles).\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\n// foreground colors\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n\n// background colors\nconsole.log(colors.bgYellow('printed on yellow background'));\nconsole.log(colors.bgBrightBlue('printed on bright blue background'));\n\n// mixing background and foreground colors\n// below two lines have same result (order in which bg and fg are combined doesn't matter)\nconsole.log(colors.bgYellow(colors.blue('printed on yellow background in blue')));\nconsole.log(colors.blue(colors.bgYellow('printed on yellow background in blue')));\n```\n\n## Advanced API\n\n**ansicolors** allows you to access opening and closing escape sequences separately.\n\n```js\nvar colors = require('ansicolors');\n\nfunction inspect(obj, depth) {\n  return require('util').inspect(obj, false, depth || 5, true);\n}\n\nconsole.log('open blue', inspect(colors.open.blue));\nconsole.log('close bgBlack', inspect(colors.close.bgBlack));\n\n// => open blue '\\u001b[34m'\n//    close bgBlack '\\u001b[49m'\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n\n## Alternatives\n\n**ansicolors** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n","bugs":{"url":"https://github.com/thlorenz/ansicolors/issues"},"_id":"ansicolors@0.3.1","dist":{"shasum":"6ce5c146a5ec3d8eef316bdb73b7605f150d2104","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.3.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.3.2":{"name":"ansicolors","version":"0.3.2","description":"Functions that surround a string with ansicolor codes so it prints in color.","main":"ansicolors.js","scripts":{"test":"node test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"keywords":["ansi","colors","highlight","string"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"license":"MIT","readmeFilename":"README.md","gitHead":"858847ca28e8b360d9b70eee0592700fa2ab087d","readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\nIn case you need styles, like `bold`, have a look at [ansistyles](https://github.com/thlorenz/ansistyles).\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\n// foreground colors\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n\n// background colors\nconsole.log(colors.bgYellow('printed on yellow background'));\nconsole.log(colors.bgBrightBlue('printed on bright blue background'));\n\n// mixing background and foreground colors\n// below two lines have same result (order in which bg and fg are combined doesn't matter)\nconsole.log(colors.bgYellow(colors.blue('printed on yellow background in blue')));\nconsole.log(colors.blue(colors.bgYellow('printed on yellow background in blue')));\n```\n\n## Advanced API\n\n**ansicolors** allows you to access opening and closing escape sequences separately.\n\n```js\nvar colors = require('ansicolors');\n\nfunction inspect(obj, depth) {\n  return require('util').inspect(obj, false, depth || 5, true);\n}\n\nconsole.log('open blue', inspect(colors.open.blue));\nconsole.log('close bgBlack', inspect(colors.close.bgBlack));\n\n// => open blue '\\u001b[34m'\n//    close bgBlack '\\u001b[49m'\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n\n## Alternatives\n\n**ansicolors** tries to meet simple use cases with a very simple API. However, if you need a more powerful ansi formatting tool, \nI'd suggest to look at the [features](https://github.com/TooTallNate/ansi.js#features) of the [ansi module](https://github.com/TooTallNate/ansi.js).\n","bugs":{"url":"https://github.com/thlorenz/ansicolors/issues"},"_id":"ansicolors@0.3.2","dist":{"shasum":"665597de86a9ffe3aa9bfbe6cae5c6ea426b4979","tarball":"https://registry.npmjs.org/ansicolors/-/ansicolors-0.3.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"thlorenz","emai
5fa
l":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}}},"readme":"# ansicolors [![build status](https://secure.travis-ci.org/thlorenz/ansicolors.png)](http://next.travis-ci.org/thlorenz/ansicolors)\n\nFunctions that surround a string with ansicolor codes so it prints in color.\n\n## Installation\n\n    npm install ansicolors\n\n## Usage\n\n```js\nvar colors = require('ansicolors');\n\nvar redHerring = colors.red('herring');\nvar blueMoon = colors.blue('moon');\nvar brighBlueMoon = colors.brightBlue('moon');\n\nconsole.log(redHerring);      // this will print 'herring' in red\nconsole.log(blueMoon);        // this 'moon' in blue\nconsole.log(brightBlueMoon);  // I think you got the idea\n```\n\n## Tests\n\nLook at the [tests](https://github.com/thlorenz/ansicolors/blob/master/test/ansicolors.js) to see more examples and/or run them via: \n\n    npm explore ansicolors && npm test\n","maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"time":{"modified":"2013-12-03T15:22:48.261Z","created":"2013-01-11T03:42:49.592Z","0.1.0":"2013-01-11T03:42:50.387Z","0.2.0":"2013-01-12T17:10:32.152Z","0.2.1":"2013-01-12T18:03:40.949Z","0.3.0":"2013-11-08T19:18:04.885Z","0.3.1":"2013-11-24T17:39:34.588Z","0.3.2":"2013-12-03T15:22:48.261Z"},"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"thlorenz.com"},"repository":{"type":"git","url":"git://github.com/thlorenz/ansicolors.git"},"users":{"joakin":true,"ajduke":true,"xjiaoyang":true},"_attachments":{}}
0

