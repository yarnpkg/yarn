HTTP/1.1 200 OK
Date: Wed, 12 Oct 2016 08:58:56 GMT
Content-Type: application/json
Transfer-Encoding: chunked
Connection: keep-alive
Set-Cookie: __cfduid=d64af4a5d8ffda1ae909f172495e6f4761476262736; expires=Thu, 12-Oct-17 08:58:56 GMT; path=/; domain=.yarnpkg.com; HttpOnly
etag: W/"47N7A0EBNHSZDFHK8Q4A4HZMF"
Cache-Control: max-age=300
Via: 1.1 varnish
Age: 30
X-Served-By: cache-lcy1125-LCY
X-Cache: HIT
X-Cache-Hits: 1
X-Timer: S1476262736.905187,VS0,VE0
Vary: Accept-Encoding
Server: cloudflare-nginx
CF-RAY: 2f095a59adda134d-LHR

1323
{"_id":"breakable","_rev":"6-4fe5a235cacbc7f31a6eaad6dde32653","name":"breakable","description":"Break out of functions, recursive or not, in a more composable way than by using exceptions explicitly. Non-local return.","dist-tags":{"latest":"1.0.0"},"versions":{"0.1.0":{"name":"breakable","version":"0.1.0","description":"Break out of functions, recursive or not, in a more composable way than by using exceptions explicitly. Non-local return.","main":"breakable.js","repository":{"type":"git","url":"https://github.com/olov/breakable.git"},"keywords":["throw","try","catch","exception","non-local","return","break","breakable"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.4"},"author":{"name":"Olov Lassus","email":"olov.lassus@gmail.com"},"license":"MIT","_id":"breakable@0.1.0","dist":{"shasum":"fe6325427b2662bd6e024009bf232f3e35fab7f5","tarball":"https://registry.npmjs.org/breakable/-/breakable-0.1.0.tgz"},"_resolved":"/tmp/breakable.tgz.tgz","_from":"/tmp/breakable.tgz.tgz","_npmVersion":"1.2.18","_npmUser":{"name":"olov","email":"olov.lassus@gmail.com"},"maintainers":[{"name":"olov","email":"olov.lassus@gmail.com"}],"directories":{}},"1.0.0":{"name":"breakable","version":"1.0.0","description":"Break out of functions, recursive or not, in a more composable way than by using exceptions explicitly. Non-local return.","main":"breakable.js","repository":{"type":"git","url":"https://github.com/olov/breakable.git"},"keywords":["throw","try","catch","exception","non-local","return","break","breakable"],"scripts":{"test":"tap test/*.js"},"devDependencies":{"tap":"~0.4.4"},"author":{"name":"Olov Lassus","email":"olov.lassus@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/olov/breakable/issues"},"homepage":"https://github.com/olov/breakable","_id":"breakable@1.0.0","dist":{"shasum":"784a797915a38ead27bad456b5572cb4bbaa78c1","tarball":"https://registry.npmjs.org/breakable/-/breakable-1.0.0.tgz"},"_resolved":"breakable.tgz","_from":"breakable.tgz","_npmVersion":"1.3.25","_npmUser":{"name":"olov","email":"olov.lassus@gmail.com"},"maintainers":[{"name":"olov","email":"olov.lassus@gmail.com"}],"directories":{}}},"readme":"# breakable.js\nBreak out of functions, recursive or not, in a more composable way\nthan by using exceptions explicitly. Non-local return.\n\n\n\n## Usage\nYou can use breakable to break out of simple loops like this example\nbut note that it is often simpler to just use `.some` instead. Anyways,\nhere's a minimal example.\n\n```javascript\nvar breakable = require(\"breakable\");\n\nbreakable(function(brk) {\n    arr.forEach(function(v) {\n        if (...) {\n           brk();\n        }\n    });\n});\n```\n\nPass a value to `brk` and it becomes the return-value of breakable.\n\n\nbreakable is useful when you want to break out of a deep recursion,\npassing a value, without riddling your code with exception ceremony.\n\nInstead of:\n\n```javascript\nvar esprima = require(\"esprima\").parse;\nvar traverse = require(\"ast-traverse\");\nvar ast = esprima(\"f(!x, y)\");\n\nvar val;\ntry {\n    traverse(ast, {pre: function(node) {\n        if (node.type === \"UnaryExpression\" && node.operator === \"!\") {\n            val = node.argument;\n            throw 0;\n        }\n    }});\n} catch(e) {\n    if (val === undefined) {\n        throw e; // re-throw if it wasn't our exception\n    }\n}\n\nconsole.dir(val); // { type: 'Identifier', name: 'x' }\n```\n\nyou use breakable and do:\n\n```javascript\nvar breakable = require(\"breakable\");\nvar esprima = require(\"esprima\").parse;\nvar traverse = require(\"ast-traverse\");\nvar ast = esprima(\"f(!x, y)\");\n\nvar val = breakable(function(brk) {\n    traverse(ast, {pre: function(node) {\n        if (node.type === \"UnaryExpression\" && node.operator === \"!\") {\n            brk(node.argument);\n        }\n    }});\n});\n\nconsole.dir(val); // { type: 'Identifier', name: 'x' }\n```\n\n\n\n## Installation\n\n### Node\nInstall using npm\n\n    npm install breakable\n\n```javascript\nvar breakable = require(\"breakable\");\n```\n\n### Browser\nClone the repo and include it in a script tag\n\n    git clone https://github.com/olov/breakable.git\n\n```html\n<script src=\"breakable/breakable.js\"></script>\n```\n","maintainers":[{"name":"olov","email":"olov.lassus@gmail.com"}],"time":{"modified":"2014-05-06T13:54:10.760Z","created":"2013-09-20T22:49:28.653Z","0.1.0":"2013-09-20T22:49:31.870Z","1.0.0":"2014-05-06T13:54:10.760Z"},"author":{"name":"Olov Lassus","email":"olov.lassus@gmail.com"},"repository":{"type":"git","url":"https://github.com/olov/breakable.git"},"homepage":"https://github.com/olov/breakable","keywords":["throw","try","catch","exception","non-local","return","break","breakable"],"bugs":{"url":"https://github.com/olov/breakable/issues"},"license":"MIT","readmeFilename":"README.md","users":{"bojand":true},"_attachments":{}}
0

